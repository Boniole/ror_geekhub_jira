---
openapi: 3.0.1
info:
  title: API V1
  version: v1
paths:
  "/api/v1/projects/{project_id}/columns":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    post:
      summary: create column
      tags:
      - Columns
      description: Create task
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: To do
                desk_id:
                  type: integer
                  default: 1
              required:
              - name
              - desk_id
  "/api/v1/projects/{project_id}/columns/{id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show column
      tags:
      - Columns
      responses:
        '200':
          description: successful
    patch:
      summary: update column
      tags:
      - Columns
      description: update task
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: To do
                desk_id:
                  type: integer
                  default: 1
                ordinal_number:
                  type: integer
                  default: 1
              required:
              - name
              - desk_id
              - ordinal_number
    delete:
      summary: delete column
      tags:
      - Columns
      responses:
        '200':
          description: successful
  "/api/v1/projects/{project_id}/comments":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    post:
      summary: create comment
      tags:
      - Comments
      description: Create comment
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  default: My comment
                commentable_type:
                  type: string
                  default: Task
                commentable_id:
                  type: integer
                  default: 1
              required:
              - body
              - commentable_type
              - commentable_id
  "/api/v1/projects/{project_id}/comments/{id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    patch:
      summary: update comment
      tags:
      - Comments
      description: Put comment
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  default: My comment
                commentable_type:
                  type: string
                  default: Task
                commentable_id:
                  type: integer
                  default: 1
              required:
              - body
              - commentable_type
              - commentable_id
    delete:
      summary: delete comment
      tags:
      - Comments
      description: Delete comment
      responses:
        '204':
          description: successful
  "/api/v1/projects/{project_id}/desks":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    get:
      summary: list desks
      tags:
      - Desks
      description: Get desks
      responses:
        '200':
          description: successful
    post:
      summary: create desk
      tags:
      - Desks
      description: Create desks
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
  "/api/v1/projects/{project_id}/desks/{id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: desk_id
      required: true
      schema:
        type: integer
    get:
      summary: show desk
      tags:
      - Desks
      description: Get desk
      responses:
        '200':
          description: successful
    patch:
      summary: update desk
      tags:
      - Desks
      description: Update desk
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
    delete:
      summary: delete desk
      tags:
      - Desks
      description: Delete desk
      responses:
        '200':
          description: successful
  "/api/v1/projects/{project_id}/documents":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    get:
      summary: list documents
      tags:
      - Documents
      description: Get documents for project
      responses:
        '200':
          description: successful
    post:
      summary: create document
      tags:
      - Documents
      description: Create document for project
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documents[]:
                  type: array
                  items:
                    type: file
                    format: binary
        required: true
        description: Array of files
  "/api/v1/projects/{project_id}/documents/{id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show document
      tags:
      - Documents
      description: Get document for project
      responses:
        '200':
          description: successful
    delete:
      summary: delete document
      tags:
      - Documents
      description: Delete document for project
      responses:
        '200':
          description: successful
  "/api/v1/tasks/{task_id}/documents":
    parameters:
    - name: task_id
      in: path
      description: task_id
      required: true
      schema:
        type: integer
    get:
      summary: list documents
      tags:
      - Documents
      description: Get documents for task
      responses:
        '200':
          description: successful
    post:
      summary: create document
      tags:
      - Documents
      description: Create document for task
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documents[]:
                  type: array
                  items:
                    type: file
                    format: binary
        required: true
        description: Array of files
  "/api/v1/tasks/{task_id}/documents/{id}":
    parameters:
    - name: task_id
      in: path
      description: task_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show document
      tags:
      - Documents
      description: Show document for task
      responses:
        '200':
          description: successful
    delete:
      summary: delete document
      tags:
      - Documents
      description: Dekete document for task
      responses:
        '200':
          description: successful
  "/api/v1/comments/{comment_id}/documents":
    parameters:
    - name: comment_id
      in: path
      description: comment_id
      required: true
      schema:
        type: integer
    get:
      summary: list documents
      tags:
      - Documents
      description: Get documents for comment
      parameters: []
      responses:
        '200':
          description: successful
    post:
      summary: create document
      tags:
      - Documents
      description: Create document for comment
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                documents[]:
                  type: array
                  items:
                    type: file
                    format: binary
        required: true
        description: Array of files
  "/api/v1/comments/{comment_id}/documents/{id}":
    parameters:
    - name: comment_id
      in: path
      description: comment_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: integer
    get:
      summary: show document
      tags:
      - Documents
      description: Get documents for comment
      responses:
        '200':
          description: successful
    delete:
      summary: delete document
      tags:
      - Documents
      description: Delete documents for comment
      responses:
        '200':
          description: successful
  "/api/v1/projects/{project_id}/github_branches":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    get:
      summary: Project list branches
      tags:
      - Github branch
      description: Project list branches
      responses:
        '200':
          description: successful
    post:
      summary: Create branch
      tags:
      - Github branch
      description: Create branch
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                task_id:
                  type: integer
                  default: 1
                branch_name:
                  type: string
                  default: branch-name
                sha:
                  type: string
                  example: Parent branch sha
              required:
              - task_id
              - branch_name
              - sha
  "/api/v1/projects/{project_id}/github_branches/{task_id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: task_id
      in: path
      description: task_id
      required: true
      schema:
        type: string
    get:
      summary: Show task branches
      tags:
      - Github branch
      description: Show task branches
      responses:
        '200':
          description: successful
  "/api/v1/projects/{project_id}/github_commits/{task_id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: task_id
      in: path
      description: task_id
      required: true
      schema:
        type: string
    - name: sha
      in: path
      description: Branch sha
      required: true
      schema:
        type: string
    get:
      summary: Show branch commits
      tags:
      - Github commit
      description: Show branch commits
      responses:
        '200':
          description: successful
  "/api/v1/projects/{project_id}/github_pullrequests":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    post:
      summary: Create pullrequest
      tags:
      - Github pullrequest
      description: Create pullrequest
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                task_id:
                  type: integer
                  default: 1
                base_name:
                  type: string
                  default: main
                head_name:
                  type: string
                  default: dev
                title:
                  type: string
                  default: Title pullrequest
                body:
                  type: string
                  default: Body pullrequest
              required:
              - name
              - description
              - private
              - has_issues
              - has_downloads
  "/api/v1/projects/{project_id}/github_repositories/create":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    post:
      summary: Create repository
      tags:
      - Github repository
      description: Create repository
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Name repository
                description:
                  type: string
                  default: Name description
                private:
                  type: boolean
                  example: true
                has_issues:
                  type: boolean
                  default: true
                has_downloads:
                  type: boolean
                  example: true
              required:
              - name
              - description
              - private
              - has_issues
              - has_downloads
  "/api/v1/projects/{project_id}/github_repositories/update":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    patch:
      summary: Update repository
      tags:
      - Github repository
      description: Update repository
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  default: Name repository
                description:
                  type: string
                  default: Name description
                private:
                  type: boolean
                  example: true
                has_issues:
                  type: boolean
                  default: true
                has_downloads:
                  type: boolean
                  example: true
              required:
              - name
              - description
              - private
              - has_issues
              - has_downloads
  "/api/v1/projects/{project_id}/github_repositories/delete":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    delete:
      summary: delete repository
      tags:
      - Github repository
      description: Delete repository
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                project_id:
                  type: integer
                  default: 1
                validate_text:
                  type: string
                  default: owner/repo_name
              required:
              - project_id
              - validate_text
  "/api/v1/github_users/show":
    get:
      summary: create column
      tags:
      - Github User
      description: Github User
      responses:
        '200':
          description: successful
  "/api/v1/projects":
    get:
      summary: list projects
      tags:
      - Projects
      description: Get projects
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    status:
                      type: string
                      default: open
                    user:
                      type: object
                    git_url:
                      type: string
                  required:
                  - id
                  - name
                  - status
    post:
      summary: create project
      tags:
      - Projects
      description: Create projects
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                    default: open
                  user:
                    type: object
                  git_url:
                    type: string
                required:
                - id
                - name
                - status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
                  default: open
              required:
              - name
  "/api/v1/projects/{id}":
    parameters:
    - name: id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    get:
      summary: show project
      tags:
      - Projects
      description: Get project
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                    default: open
                  user:
                    type: object
                  git_url:
                    type: string
                required:
                - id
                - name
                - status
    patch:
      summary: update project
      tags:
      - Projects
      description: Update project
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                    default: open
                  created_at:
                    type: string
                  updated_at:
                    type: string
                  user:
                    type: object
                  git_url:
                    type: string
                required:
                - id
                - name
                - status
                - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
                  default: open
                user_id:
                  type: integer
                git_url:
                  type: string
              required:
              - name
              - status
              - user_id
    delete:
      summary: delete project
      tags:
      - Projects
      description: Delete project
      responses:
        '204':
          description: successful
  "/api/v1/projects/{project_id}/add_member":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    post:
      summary: add member to project
      tags:
      - Projects
      description: Add member to project
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user_id:
                    type: integer
                  project_id:
                    type: integer
                  role:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                - id
                - email
                - role
                - created_at
                - updated_at
        '422':
          description: unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/projects/{project_id}/delete_member":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    delete:
      summary: delete member from project
      tags:
      - Projects
      description: Delete member from project
      parameters: []
      responses:
        '204':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
              required:
              - email
  "/api/v1/projects/{project_id}/tasks":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    post:
      summary: create task
      tags:
      - Tasks
      description: Create task
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee_id:
                  type: integer
                  default: 1
                column_id:
                  type: integer
                  default: 1
                desk_id:
                  type: integer
                  default: 1
                project_id:
                  type: integer
                  default: 1
                name:
                  type: string
                description:
                  type: string
                priority_number:
                  type: integer
                  default: 1
                estimate:
                  type: string
                time_work:
                  type: string
                label:
                  type: string
                priority:
                  type: integer
                start_date:
                  type: string
                end_date:
                  type: string
                status:
                  type: integer
                type_of:
                  type: integer
              required:
              - name
              - column_id
              - desk_id
              - project_id
  "/api/v1/projects/{project_id}/tasks/{id}":
    parameters:
    - name: project_id
      in: path
      description: project_id
      required: true
      schema:
        type: integer
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show task
      tags:
      - Tasks
      description: Get task by id
      responses:
        '200':
          description: successful
    patch:
      summary: update task
      tags:
      - Tasks
      description: Update task
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee_id:
                  type: integer
                  default: 1
                column_id:
                  type: integer
                  default: 1
                desk_id:
                  type: integer
                  default: 1
                project_id:
                  type: integer
                  default: 1
                name:
                  type: string
                description:
                  type: string
                priority_number:
                  type: integer
                  default: 1
                estimate:
                  type: string
                time_work:
                  type: string
                label:
                  type: string
                priority:
                  type: integer
                start_date:
                  type: string
                end_date:
                  type: string
                status:
                  type: integer
                type_of:
                  type: integer
              required:
              - name
              - column_id
              - desk_id
              - project_id
    delete:
      summary: delete task
      tags:
      - Tasks
      description: Delete task
      responses:
        '200':
          description: successful
  "/api/v1/users":
    get:
      summary: Retrieves all users
      tags:
      - Users
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    first_name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                  required:
                  - id
                  - first_name
                  - last_name
                  - email
    post:
      summary: Creates a user
      tags:
      - Users
      parameters: []
      security: []
      responses:
        '200':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
                github_token:
                  type: string
              required:
              - first_name
              - last_name
              - email
              - password
  "/api/v1/users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  first_name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                  github_token:
                    type: string
                required:
                - id
                - first_name
                - last_name
                - email
        '404':
          description: user not found
    patch:
      summary: Updates a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user updated
        '422':
          description: invalid request
        '404':
          description: user not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                first_name:
                  type: string
                last_name:
                  type: string
                github_token:
                  type: string
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: user deleted
        '404':
          description: user not found
  "/api/v1/my_profile":
    get:
      summary: Retrieves information about the current user
      tags:
      - Users
      responses:
        '200':
          description: user information found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  first_name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                required:
                - id
                - first_name
                - last_name
                - email
        '401':
          description: unauthorized access
  "/api/v1/login":
    post:
      summary: Logs in a user
      tags:
      - Authentication
      parameters: []
      security: []
      responses:
        '200':
          description: logged in successfully
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/reset":
    post:
      summary: Resets a user password
      tags:
      - Users
      parameters: []
      security:
      - bearerAuth: []
      responses:
        '200':
          description: Password reset successfully
        '401':
          description: Unauthorized
        '422':
          description: Invalid request
        '404':
          description: User not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                password:
                  type: string
              required:
              - old_password
              - password
servers:
- url: http://{localhost}
  variables:
    localhost:
      default: 127.0.0.1:3000
- url: https://{kotello}
  variables:
    kotello:
      default: kotello.space
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
- bearerAuth: []

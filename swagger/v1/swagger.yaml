---
openapi: 3.0.1
info:
  title: API V1
  version: v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: [ ]
paths:
  "/api/v1/comments":
    get:
      summary: list comments
      tags:
      - Comments
      description: Get comments
      responses:
        '200':
          description: successful
    post:
      summary: create comment
      tags:
      - Comments
      description: Create comment
      responses:
        '200':
          description: successful
  "/api/v1/comments/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show comment
      tags:
      - Comments
      description: Get comment
      responses:
        '200':
          description: successful
    patch:
      summary: update comment
      tags:
      - Comments
      description: Update comment
      responses:
        '200':
          description: successful
    put:
      summary: update comment
      tags:
      - Comments
      description: Put comment
      responses:
        '200':
          description: successful
    delete:
      summary: delete comment
      tags:
      - Comments
      description: Delete comment
      responses:
        '200':
          description: successful
  "/api/v1/desks":
    get:
      summary: list desks
      tags:
      - Desks
      description: Get desks
      responses:
        '200':
          description: successful
    post:
      summary: create desk
      tags:
      - Desks
      description: Create desk
      responses:
        '200':
          description: successful
  "/api/v1/desks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show desk
      tags:
      - Desks
      description: Get desk by id
      responses:
        '200':
          description: successful
    patch:
      summary: update desk
      tags:
      - Desks
      description: Update desk
      responses:
        '200':
          description: successful
    put:
      summary: update desk
      tags:
      - Desks
      description: Update desk
      responses:
        '200':
          description: successful
    delete:
      summary: delete desk
      tags:
      - Desks
      description: Delete desk
      responses:
        '200':
          description: successful
  "/api/v1/projects":
    get:
      summary: list projects
      tags:
      - Projects
      description: Get projects
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    status:
                      type: string
                    created_at:
                      type: string
                    updated_at:
                      type: string
                  required:
                  - id
                  - name
                  - status
    post:
      summary: create project
      tags:
      - Projects
      description: Create projects
      parameters: []
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                  user:
                    type: object
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                - id
                - name
                - status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type: object
                properties:
                  name:
                    type: string
                  status:
                    type: string
                  user_id:
                    type: string
              required:
              - name
              - status
              - user_id
  "/api/v1/projects/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show project
      tags:
      - Projects
      description: Get project
      responses:
        '200':
          description: successful
    patch:
      summary: update project
      tags:
      - Projects
      description: Update project
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                  user:
                    type: object
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                - id
                - name
                - status
                - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type: object
                properties:
                  name:
                    type: string
                  status:
                    type: string
                  user_id:
                    type: string
              required:
              - name
              - status
              - user_id
    put:
      summary: update project
      tags:
      - Projects
      description: Update project
      parameters: []
      responses:
        '200':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  status:
                    type: string
                  user:
                    type: object
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                - id
                - name
                - status
                - user
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type: object
                properties:
                  name:
                    type: string
                  status:
                    type: string
                  user_id:
                    type: string
              required:
              - name
              - status
              - user_id
    delete:
      summary: delete project
      tags:
      - Projects
      description: Delete project
      responses:
        '204':
          description: successful
  "/api/v1/projects/{project_id}/add_member":
    post:
      summary: add member to project
      tags:
      - Projects
      description: Add member to project
      parameters:
      - name: project_id
        in: path
        description: project_id
        required: true
        schema:
          type: string
      responses:
        '201':
          description: successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  user:
                    type: object
                  role:
                    type: string
                  created_at:
                    type: string
                  updated_at:
                    type: string
                required:
                - id
                - user
                - role
        '422':
          description: unprocessable entity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                required:
                - error
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
              required:
              - user_id
  "/api/v1/projects/{project_id}/members/{user_id}":
    delete:
      summary: delete member from project
      tags:
      - Projects
      description: Delete member from project
      parameters:
      - name: project_id
        in: path
        description: project_id
        required: true
        schema:
          type: string
      - name: user_id
        in: path
        description: user_id
        required: true
        schema:
          type: string
      responses:
        '204':
          description: successful
  "/api/v1/tasks/{id}/comments":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: comments task
      tags:
      - Tasks
      description: Get comments by task id
      responses:
        '200':
          description: successful
  "/api/v1/tasks":
    get:
      summary: list tasks
      tags:
      - Tasks
      description: Get tasks list
      responses:
        '200':
          description: successful
    post:
      summary: create task
      tags:
      - Tasks
      description: Create task
      parameters:
      - name: user_id
        in: post
        required: true
        schema:
          type: integer
        default: 1
        description: The ID of the user (integer)
      - name: project_id
        in: post
        required: true
        schema:
          type: integer
        default: 1
        description: The ID of the project (integer)
      - name: assignee_id
        in: post
        required: false
        schema:
          type: integer
        default: 1
        description: The ID of the assignee (integer)
      - name: desk_id
        in: post
        required: true
        schema:
          type: integer
        default: 1
        description: The ID of the desk (integer)
      - name: column_id
        in: post
        required: true
        schema:
          type: integer
        default: 1
        description: The ID of the column (integer)
      - name: column_type
        in: post
        required: true
        schema:
          type: string
        default: Column
        description: The type of the column
      - name: title
        in: post
        required: true
        schema:
          type: string
        default: Task title
        description: The title of the task (string)
      - name: description
        in: post
        required: false
        schema:
          type: string
        default: Task description
        description: The description of the task (optional)
      - name: estimate
        in: post
        required: false
        schema:
          type: string
        default: 2w
        description: The estimated time for completion (e.g. 2w, 4d, 6h, 45m) (optional)
      - name: label
        in: post
        required: false
        schema:
          type: string
        default: task
        description: The label of the task (optional)
      - name: start
        in: post
        required: false
        schema:
          type: string
          format: date
        default: '2023-12-12'
        description: The start date of the task (date in YYYY-MM-DD format) (optional)
      - name: end
        in: post
        required: false
        schema:
          type: string
          format: date
        default: '2023-12-12'
        description: The end date of the task (date in YYYY-MM-DD format) (optional)
      - name: priority
        in: post
        required: false
        schema:
          type: string
          enum:
          - lowest
          - low
          - high
          - highest
        default: lowest
        description: 'Task priority: lowest/low/high/highest.'
      - name: type_of
        in: post
        required: false
        schema:
          type: string
          enum:
          - task
          - bug
          - epic
        default: task
        description: 'Task type: task/bug/epic.'
      - name: status
        in: post
        required: false
        schema:
          type: string
          enum:
          - open
          - close
        default: open
        description: 'Task status: open/close.'
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee_id:
                  type: integer
                  default: 1
                column_id:
                  type: integer
                  default: 1
                column_type:
                  type: string
                  default: Column
                desk_id:
                  type: integer
                  default: 1
                project_id:
                  type: integer
                  default: 1
                user_id:
                  type: integer
                  default: 1
                title:
                  type: string
                description:
                  type: string
                label:
                  type: string
                priority:
                  type: integer
                start:
                  type: string
                end:
                  type: string
                status:
                  type: integer
                type_of:
                  type: integer
              required:
              - title
              - column_id
              - column_type
              - desk_id
              - project_id
              - user_id
  "/api/v1/tasks/{id}":
    parameters:
    - name: id
      in: path
      description: id
      required: true
      schema:
        type: string
    get:
      summary: show task
      tags:
      - Tasks
      description: Get task by id
      responses:
        '200':
          description: successful
    patch:
      summary: update task
      tags:
      - Tasks
      description: Update task
      parameters: []
      responses:
        '200':
          description: successful
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                assignee_id:
                  type: integer
                  default: 1
                column_id:
                  type: integer
                  default: 1
                column_type:
                  type: string
                  default: Column
                desk_id:
                  type: integer
                  default: 1
                project_id:
                  type: integer
                  default: 1
                user_id:
                  type: integer
                  default: 1
                title:
                  type: string
                description:
                  type: string
                label:
                  type: string
                priority:
                  type: integer
                start:
                  type: string
                end:
                  type: string
                status:
                  type: integer
                type_of:
                  type: integer
              required:
              - title
              - column_id
              - column_type
              - desk_id
              - project_id
              - user_id
    delete:
      summary: delete task
      tags:
      - Tasks
      description: Delete task
      responses:
        '200':
          description: successful
  "/api/v1/users":
    get:
      summary: Retrieves all users
      tags:
      - Users
      responses:
        '200':
          description: Users found
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    name:
                      type: string
                    last_name:
                      type: string
                    email:
                      type: string
                  required:
                  - id
                  - name
                  - last_name
                  - email
    post:
      summary: Creates a user
      tags:
      - Users
      security: []
      parameters: []
      responses:
        '200':
          description: user created
        '422':
          description: invalid request
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
              required:
              - name
              - last_name
              - email
              - password
  "/api/v1//users/{id}":
    get:
      summary: Retrieves a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                required:
                - id
                - name
                - last_name
                - email
        '404':
          description: user not found
  "/api/v1/about_user":
    get:
      summary: Retrieves information about the current user
      tags:
      - Users
      parameters:
      - name: current_user
        in: header
        description: JWT token to identify current user
        schema:
          type: string
      responses:
        '200':
          description: user information found
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  name:
                    type: string
                  last_name:
                    type: string
                  email:
                    type: string
                required:
                - id
                - name
                - last_name
                - email
        '401':
          description: unauthorized access
  "/api/v1/users/{id}":
    patch:
      summary: Updates a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: user updated
        '422':
          description: invalid request
        '404':
          description: user not found
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                password:
                  type: string
    delete:
      summary: Deletes a user
      tags:
      - Users
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '204':
          description: user deleted
        '404':
          description: user not found
  "/api/v1/login":
    post:
      summary: Logs in a user
      tags:
      - Authentication
      security: []
      parameters: []
      responses:
        '200':
          description: logged in successfully
        '401':
          description: unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
  "/api/v1/reset":
    post:
      summary: Resets a user password
      tags:
      - Users
      parameters: []
      responses:
        '200':
          description: Password reset successfully
        '404':
          description: Link not valid or expired
        '422':
          description: Invalid request
        '401':
          description: Unauthorized
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required:
              - email
              - password
servers:
- url: https://{defaultHost}
  variables:
    defaultHost:
      default: kotello.space
